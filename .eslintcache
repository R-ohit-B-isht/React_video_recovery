[{"C:\\Users\\rbtun\\OneDrive\\Desktop\\GIThub\\ASSAM\\React_video_recovery\\react-electron\\src\\index.js":"1","C:\\Users\\rbtun\\OneDrive\\Desktop\\GIThub\\ASSAM\\React_video_recovery\\react-electron\\src\\FilesViewer.js":"2","C:\\Users\\rbtun\\OneDrive\\Desktop\\GIThub\\ASSAM\\React_video_recovery\\react-electron\\src\\App.js":"3"},{"size":276,"mtime":1672502954338,"results":"4","hashOfConfig":"5"},{"size":809,"mtime":1672502954337,"results":"6","hashOfConfig":"5"},{"size":8362,"mtime":1672506845031,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vili68",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"C:\\Users\\rbtun\\OneDrive\\Desktop\\GIThub\\ASSAM\\React_video_recovery\\react-electron\\src\\index.js",[],"C:\\Users\\rbtun\\OneDrive\\Desktop\\GIThub\\ASSAM\\React_video_recovery\\react-electron\\src\\FilesViewer.js",[],"C:\\Users\\rbtun\\OneDrive\\Desktop\\GIThub\\ASSAM\\React_video_recovery\\react-electron\\src\\App.js",["15","16","17","18","19","20","21","22","23","24","25","26","27"],"// import { useState, useMemo } from 'react'\r\n// import { FilesViewer } from './FilesViewer'\r\n\r\n// const fs = window.require('fs')\r\n// const pathModule = window.require('path')\r\n\r\n// const { app } = window.require('@electron/remote')\r\n\r\n// const formatSize = size => {\r\n//   var i = Math.floor(Math.log(size) / Math.log(1024))\r\n//   return (\r\n//     (size / Math.pow(1024, i)).toFixed(2) * 1 +\r\n//     ' ' +\r\n//     ['B', 'kB', 'MB', 'GB', 'TB'][i]\r\n//   )\r\n// }\r\n\r\n// function App() {\r\n//   const [path, setPath] = useState(app.getAppPath())\r\n\r\n//   const files = useMemo(\r\n//     () =>\r\n//       fs\r\n//         .readdirSync(path)\r\n//         .map(file => {\r\n//           const stats = fs.statSync(pathModule.join(path, file))\r\n//           return {\r\n//             name: file,\r\n//             size: stats.isFile() ? formatSize(stats.size ?? 0) : null,\r\n//             directory: stats.isDirectory()\r\n//           }\r\n//         })\r\n//         .sort((a, b) => {\r\n//           if (a.directory === b.directory) {\r\n//             return a.name.localeCompare(b.name)\r\n//           }\r\n//           return a.directory ? -1 : 1\r\n//         }),\r\n//     [path]\r\n//   )\r\n\r\n//   const onBack = () => setPath(pathModule.dirname(path))\r\n//   const onOpen = folder => setPath(pathModule.join(path, folder))\r\n\r\n//   const [searchString, setSearchString] = useState('')\r\n//   const filteredFiles = files.filter(s => s.name.startsWith(searchString))\r\n\r\n//   return (\r\n//     <div className=\"container mt-2\">\r\n//       <h4>{path}</h4>\r\n//       <div className=\"form-group mt-4 mb-2\">\r\n//         <input\r\n//           value={searchString}\r\n//           onChange={event => setSearchString(event.target.value)}\r\n//           className=\"form-control form-control-sm\"\r\n//           placeholder=\"File search\"\r\n//         />\r\n//       </div>\r\n//       <FilesViewer files={filteredFiles} onBack={onBack} onOpen={onOpen} />\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default App\r\n\r\n\r\nimport { useState, useMemo } from 'react'\r\n\r\nconst fs = window.require('fs')\r\nconst pathModule = window.require('path')\r\n\r\nconst { app } = window.require('@electron/remote')\r\n\r\nconst { resolve } = window.require(\"path\");\r\n\r\n// const path = require('path');\r\n// require(\"electron-reload\")(__dirname);\r\nconst esr = resolve(\"./model/Real-esrgan/realesrgan-ncnn-vulkan.exe\");\r\nconst esrw = esr.split(\"\\\\\").join(\"\\\\\\\\\");\r\nconst ffmpeg = resolve(\"./model/ffmpeg/bin/ffmpeg.exe\");\r\nconst ffmpegw = ffmpeg.split(\"\\\\\").join(\"\\\\\\\\\");\r\nconst tmp_frames = resolve(\"./model/tmp_frames/\");\r\nconst tmp_framesw = tmp_frames.split(\"\\\\\").join(\"\\\\\\\\\");\r\nconst out_frames = resolve(\"./model/out_frames/\");\r\nconst out_framesw = out_frames.split(\"\\\\\").join(\"\\\\\\\\\");\r\nconst exec = window.require(\"child_process\").exec;\r\n\r\n\r\nvar options = {\r\n  name: \"Electron\",\r\n  icns: \"/Applications/Electron.app/Contents/Resources/Electron.icns\", // (optional)\r\n};\r\nconst { ipcRenderer, contextBridge } = window.require(\"electron\");\r\n\r\nconst WINDOW_API = {\r\n  GetVersion: () => ipcRenderer.invoke(\"get/version\"),\r\n  Realesrgan: (inp, out) =>\r\n    exec(\r\n      esrw + \" -i \" + inp + \" -o \" + out,\r\n      options,\r\n      function (error, stdout, stderr) {\r\n        if (error) throw error;\r\n        console.log(\"stdout: \" + stdout);\r\n        return 1;\r\n      }\r\n    ),\r\n  empty_tmp_frames: () =>\r\n    exec(\"rm \" + tmp_framesw + \"/*\", options, function (error, stdout, stderr) {\r\n      if (error) throw error;\r\n      console.log(\"stdout: \" + stdout);\r\n      return 1;\r\n    }),\r\n  empty_out_frames: () =>\r\n    exec(\"rm \" + out_framesw + \"/*\", options, function (error, stdout, stderr) {\r\n      if (error) throw error;\r\n      console.log(\"stdout: \" + stdout);\r\n    }),\r\n  Ffmpeg: (inp) =>\r\n    exec(\r\n      ffmpegw +\r\n        \" -i \" +\r\n        inp +\r\n        \" -qscale:v 1 -qmin 1 -qmax 1 -vsync 0 \" +\r\n        tmp_framesw +\r\n        \"/frame%08d.jpg\",\r\n      options,\r\n      function (error, stdout, stderr) {\r\n        if (error) throw error;\r\n        console.log(\"stdout: \" + stdout);\r\n      }\r\n    ),\r\n  Realesrgan_frames: () =>\r\n    exec(\r\n      esrw +\r\n        \" -i \" +\r\n        tmp_framesw +\r\n        \" -o \" +\r\n        out_framesw +\r\n        \" -n realesr-animevideov3 -s 2 -f jpg\",\r\n      options,\r\n      function (error, stdout, stderr) {\r\n        if (error) throw error;\r\n        console.log(\"stdout: \" + stdout);\r\n      }\r\n    ),\r\n  MergeFrames: (inp, out) =>\r\n    exec(\r\n      ffmpegw +\r\n        \" -i \" +\r\n        out_framesw +\r\n        \"/frame%08d.jpg\" +\r\n        \" -i \" +\r\n        inp +\r\n        \"  -map 0:v:0 -map 1:a:0 -c:a copy -c:v libx264 -r 23.98 -pix_fmt yuv420p \" +\r\n        out,\r\n      options,\r\n      function (error, stdout, stderr) {\r\n        if (error) throw error;\r\n        console.log(\"stdout: \" + stdout);\r\n      }\r\n    ),\r\n  Clean: () => {\r\n    empty_my_tmp();\r\n    empty_my_out();\r\n  },\r\n  Realesrgan_on_Video: (inp, out) =>\r\n    exec(\r\n      ffmpegw +\r\n        \" -i \" +\r\n        inp +\r\n        \" -qscale:v 1 -qmin 1 -qmax 1 -vsync 0 \" +\r\n        tmp_framesw +\r\n        \"/frame%08d.jpg\" +\r\n        \" & \" +\r\n        esrw +\r\n        \" -i \" +\r\n        tmp_framesw +\r\n        \" -o \" +\r\n        out_framesw +\r\n        \" -n realesr-animevideov3 -s 2 -f jpg\" +\r\n        \" & \" +\r\n        ffmpegw +\r\n        \" -i \" +\r\n        out_framesw +\r\n        \"/frame%08d.jpg\" +\r\n        \" -i \" +\r\n        inp +\r\n        \"  -map 0:v:0 -map 1:a:0 -c:a copy -c:v libx264 -r 23.98 -pix_fmt yuv420p \" +\r\n        out,\r\n      options,\r\n      function (error, stdout, stderr) {\r\n        if (error) throw error;\r\n        console.log(\"stdout: \" + stdout);\r\n      }\r\n    ),\r\n  FilesInTemp: () =>\r\n    fs.readdir(tmp_framesw, function (err, files) {\r\n      if (err) {\r\n        throw err;\r\n      } else {\r\n        return files.length;\r\n      }\r\n    }),\r\n  FilesInOut: () =>\r\n    fs.readdir(out_framesw, function (err, files) {\r\n      if (err) {\r\n        throw err;\r\n      } else {\r\n        return files.length;\r\n      }\r\n    }),\r\n};\r\nfunction empty_my_tmp() {\r\n  return new Promise((resolve, reject) => {\r\n    resolve(\r\n      fs.readdir(tmp_framesw, function (err, files) {\r\n        if (err) {\r\n          throw err;\r\n        } else {\r\n          //remove all files in tmp_frames if its not empty\r\n          if (files.length > 0) {\r\n            WINDOW_API.empty_tmp_frames();\r\n          }\r\n        }\r\n      })\r\n    );\r\n  });\r\n}\r\nfunction empty_my_out() {\r\n  return new Promise((resolve, reject) => {\r\n    fs.readdir(out_framesw, function (err, files) {\r\n      if (err) {\r\n        throw err;\r\n      } else {\r\n        //remove all files in out_framesw if its not empty\r\n        if (files.length > 0) {\r\n          WINDOW_API.empty_out_frames();\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n// contextBridge.exposeInMainWorld(\"api\", WINDOW_API);\r\n\r\n\tlet realesr;\r\n\t// let fileInput=\"C:/Users/rbtun/Videos/V/realesrgan-ncnn-vulkan-20220424-windows/input.jpg\";\r\n\tvar fileInput=undefined;\r\n\tlet fileOutput=\"C:/Users/rbtun/Videos/V/realesrgan-ncnn-vulkan-20220424-windows/output.png\";\r\n\tlet tmpFiles=0;\r\n\r\n\t\r\n\tconst apply_realesr=()=>{\r\n\t\tlet esrw=fileInput.split('\\\\').join('/')\r\n\t\tlet out=esrw.substring(0,esrw.lastIndexOf(\"/\")+1)+\"output.png\"\r\n\t\tconsole.log(out)\r\n\t\t return realesr= WINDOW_API.Realesrgan(esrw,out)\r\n\t\t console.log(realesr)\r\n\t}\r\n\r\n\tfunction call_apply_realesr(){\r\n\tlet  x;\r\n\tx=\tapply_realesr()\r\n\tif(x==undefined)\r\n\t\tconsole.log(\"undefined\")\r\n\telse\r\n\t\tconsole.log(\"done\")\r\n\t}\r\n\tconst apply_realesr_on_video=async()=>{\r\n\t\tlet esrw=fileInput.split('\\\\').join('/')\r\n\t\tlet out=esrw.substring(0,esrw.lastIndexOf(\"/\")+1)+\"output_Video.mp4\"\r\n\t\tconsole.log(out)\r\n\t\trealesr= await WINDOW_API.Realesrgan_on_Video(esrw,out)\r\n\t\tfiles_in_temp()\r\n\t}\r\n\r\n  const onDrop = files => {\r\n\tfileInput=files[0].path;\r\n\talert(fileInput)\r\n} \r\n\r\nasync function clear_fileInput(){\r\n\tfileInput=\"\"\r\n\tawait WINDOW_API.Clean()\r\n\tfiles_in_temp()\r\n}\r\nfunction get_fileInput(){\r\n\treturn fileInput\r\n}\r\nfunction files_in_temp(){\r\n\ttmpFiles= WINDOW_API.FilesInTemp()\r\n\tconsole.log(tmpFiles)\r\n\t\r\n}\r\nfunction files_in_out(){\r\n\treturn WINDOW_API.FilesInOut()\r\n}\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const[version,setVersion]=useState(\"\");\r\n  const get_version=async()=>{\r\n\t\tsetVersion(await WINDOW_API.GetVersion())\r\n\t}\r\n    return (\r\n      <div>\r\n<h1>hi{version}</h1>\r\n<button class=\"ui button\" onClick={get_version}>click me</button>\r\n      </div>\r\n      \r\n  \r\n  )\r\n}\r\n\r\nexport default App\r\n",{"ruleId":"28","severity":1,"message":"29","line":67,"column":20,"nodeType":"30","messageId":"31","endLine":67,"endColumn":27},{"ruleId":"28","severity":1,"message":"32","line":70,"column":7,"nodeType":"30","messageId":"31","endLine":70,"endColumn":17},{"ruleId":"28","severity":1,"message":"33","line":72,"column":9,"nodeType":"30","messageId":"31","endLine":72,"endColumn":12},{"ruleId":"28","severity":1,"message":"34","line":93,"column":22,"nodeType":"30","messageId":"31","endLine":93,"endColumn":35},{"ruleId":"28","severity":1,"message":"35","line":250,"column":6,"nodeType":"30","messageId":"31","endLine":250,"endColumn":16},{"ruleId":"36","severity":1,"message":"37","line":259,"column":4,"nodeType":"38","messageId":"39","endLine":259,"endColumn":24},{"ruleId":"28","severity":1,"message":"40","line":262,"column":11,"nodeType":"30","messageId":"31","endLine":262,"endColumn":29},{"ruleId":"41","severity":1,"message":"42","line":265,"column":6,"nodeType":"43","messageId":"44","endLine":265,"endColumn":8},{"ruleId":"28","severity":1,"message":"45","line":270,"column":8,"nodeType":"30","messageId":"31","endLine":270,"endColumn":30},{"ruleId":"28","severity":1,"message":"46","line":278,"column":9,"nodeType":"30","messageId":"31","endLine":278,"endColumn":15},{"ruleId":"28","severity":1,"message":"47","line":283,"column":16,"nodeType":"30","messageId":"31","endLine":283,"endColumn":31},{"ruleId":"28","severity":1,"message":"48","line":288,"column":10,"nodeType":"30","messageId":"31","endLine":288,"endColumn":23},{"ruleId":"28","severity":1,"message":"49","line":296,"column":10,"nodeType":"30","messageId":"31","endLine":296,"endColumn":22},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'pathModule' is assigned a value but never used.","'app' is assigned a value but never used.","'contextBridge' is assigned a value but never used.","'fileOutput' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'call_apply_realesr' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'apply_realesr_on_video' is assigned a value but never used.","'onDrop' is assigned a value but never used.","'clear_fileInput' is defined but never used.","'get_fileInput' is defined but never used.","'files_in_out' is defined but never used."]